package my.PointAndClickGame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Calendar;
import java.util.Date;
import java.util.Random;
import java.util.regex.Pattern;

/**
 *
 * @author kslea_000
 */


public class ColorMe extends javax.swing.JFrame {
    
    EndGame eg = new EndGame();
    
    private Thread timeThread;
    private static final int FHEIGHT = 600;
    private static final int FWIDTH = 400;
    private static final int BHEIGHT = 75;
    private static final int BWIDTH= 75;
    private static int colorCodedIndex;
    private static int fontColorIndex;
    private int score;
    private int rounds = 5; 
    private final String[] coloredImageArray = {"blue.png", "red.png", "green.png","purple.png","yellow.png"};
    Random randIndex = new Random();
    
    private JButton[] buttonCircleIcon = new JButton[5];
    private JLabel coloredWord = new JLabel("Pick the color");
    
    public class KeyBinds extends KeyAdapter{
        public void keyPressed(KeyEvent e){
            int keyCode = e.getKeyCode();
            switch(keyCode){
                case KeyEvent.VK_ESCAPE:
                    System.exit(0);
                    break;
                    
                case KeyEvent.VK_F1:
                    JOptionPane.showMessageDialog(ColorMe.this, " Karl Santino Leano 008291296\n "
                            + "Fanny Avila 009337549\n "
                            + "Point And Click Game Final Boss\n"
                            + " Winter 2016");
                    break;
            
            }
        }
    }
    
    public ColorMe() {
        initComponents();
        this.addKeyListener(new KeyBinds());
        setInitialScore();
        generateButtons();
        randomizeButtonPosition();
        generateRandomColor();
        generateRandomWord();
        
        //Time stuff
          Runnable myThread = new Runnable(){

            @Override
            public void run() {
              try{
                  for( ; ; ){
                      Thread.sleep(100);
                      SwingUtilities.invokeLater(new Runnable(){
                      public void run(){
                          updateTime();
                      }
                  });
                  }
              }
              catch(InterruptedException exc){
                  System.out.println("Call to sleep was interrupted.");    
                  System.exit(1);
                  }
              }
            };
       timeThread = new Thread(myThread);
       timeThread.start();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        p2 = new javax.swing.JPanel();
        scoreLabel = new javax.swing.JLabel();
        currentTime = new javax.swing.JLabel();
        p = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(600, 400));
        setMinimumSize(new java.awt.Dimension(600, 400));
        setPreferredSize(new java.awt.Dimension(600, 400));
        setResizable(false);

        p2.setMaximumSize(null);

        scoreLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        scoreLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        scoreLabel.setText("Score");

        currentTime.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        currentTime.setText("Time");
        currentTime.setPreferredSize(new java.awt.Dimension(59, 20));

        javax.swing.GroupLayout p2Layout = new javax.swing.GroupLayout(p2);
        p2.setLayout(p2Layout);
        p2Layout.setHorizontalGroup(
            p2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scoreLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 346, Short.MAX_VALUE)
                .addComponent(currentTime, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        p2Layout.setVerticalGroup(
            p2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p2Layout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addGroup(p2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scoreLabel)
                    .addComponent(currentTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        p.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout pLayout = new javax.swing.GroupLayout(p);
        p.setLayout(pLayout);
        pLayout.setHorizontalGroup(
            pLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pLayout.setVerticalGroup(
            pLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 380, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(p2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(p, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(p2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(p, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    // Now catch which button was pressed using getActionCommand
    // change getActionCommand to an int to COMPARE to fontColorIndex    
    public void ActionPerformed(ActionEvent ae){
        int aeCommand = Integer.parseInt(ae.getActionCommand());
        if(fontColorIndex == aeCommand){
            score += 100;
            scoreLabel.setText(""+score);
        }           
        newRound();
    }
    
    private void updateTime(){
        Date temp = Calendar.getInstance().getTime();
        currentTime.setText(temp.toString());
    }
    
    
    // get previous score from Hangman
    private void setInitialScore(){
        scoreLabel.setText(eg.getScore() + "");
    } 
    
    /*  After 5 rounds go to EndGame. Add scores together from hangman to set 
        final score
    */
    private void newRound(){
        rounds--;
        p.removeAll();
        p.repaint();
        System.out.println("CurrentCM score = " + score);
        
       if(rounds != 0){
        generateButtons();
        randomizeButtonPosition();
        generateRandomColor();
        generateRandomWord(); 
       }
       else{
           // add scores to EndGame. Launch Sudoku
            System.out.println("color me score going to add in EG = " + score);
            System.out.println("score currently in EG = " + eg.getScore());
            eg.addScore(score);
            
            Sudoku s = new Sudoku();
            s.setVisible(true);
            this.setVisible(false);
        }
    }
        

    // loop until everyting is setlted down. 
    private void randomizeButtonPosition(){

        int spotToAdd = 0;
        while(spotToAdd < coloredImageArray.length){
            Random random = new Random();
            coloredWord.setBounds(Math.abs(random.nextInt(p.getWidth() - 150)),
                        Math.abs(random.nextInt(p.getHeight() - 100)), 150,
                        100);
            coloredWord.setFont(new Font("Serif", Font.PLAIN, 30));
            
            buttonCircleIcon[spotToAdd].setBounds(Math.abs(random.nextInt(p.getWidth()) - BWIDTH),
                        Math.abs(random.nextInt(p.getHeight() - BHEIGHT)), BWIDTH,
                        BHEIGHT);
            for(int i = 0; i < 50; i++){
                if(intersectsButton(buttonCircleIcon[spotToAdd],p.getComponents()) || 
                   intersectsButton(coloredWord,p.getComponents())){
                    buttonCircleIcon[spotToAdd].setBounds(Math.abs(random.nextInt(p.getWidth() - BWIDTH)),
                            Math.abs(random.nextInt(p.getHeight()) - BHEIGHT), BWIDTH,
                            BHEIGHT);
                    
                    coloredWord.setBounds(Math.abs(random.nextInt(p.getWidth() - 150)),
                        Math.abs(random.nextInt(p.getHeight() - 100)), 150,
                        100);
                }else{
                    p.add(buttonCircleIcon[spotToAdd]);
                    // VERY IMPORTANT. drag and drop make people seem to forget the basics
                    buttonCircleIcon[spotToAdd].addActionListener(new ActionListener(){
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                            ActionPerformed(evt);
                        }
                    });
                    spotToAdd++;
                    break;
                }
            }

        }
        p.add(coloredWord);
    }
    
    private boolean intersectsButton(Component component, Component[] components){
        for (Component c : components) {
            if (c.getBounds().intersects(component.getBounds())) {
                return true;
            }
        }
        return false;
    }
    
    
    
    // create buttons and tag each one with a corresponding ActionCommand. Check 
    // ActionCommands for which button pressed then COMPARE with fontIndex
    private void generateButtons(){

        for(int i = 0; i < coloredImageArray.length; i++){
            ImageIcon image = new ImageIcon(getClass().getResource("/img/"+coloredImageArray[i]));
//            Image icon = image.getImage();
//            Image newIcon = icon.getScaledInstance(50,50 , java.awt.Image.SCALE_SMOOTH);
            buttonCircleIcon[i] = new JButton();
            buttonCircleIcon[i].setIcon(image);
            buttonCircleIcon[i].setPreferredSize(new Dimension(150,150));
            buttonCircleIcon[i].setActionCommand(Integer.toString(i));
            buttonCircleIcon[i].setFocusable(false);
        }
        initMouseListeners();
    }
    
    //use coloredImageArray to pick color
    private void generateRandomColor(){
        fontColorIndex = randIndex.nextInt(coloredImageArray.length);
        switch(fontColorIndex){
            case 0: coloredWord.setForeground(Color.BLUE);
                    break;
            case 1: coloredWord.setForeground(Color.RED);
                    break;
            case 2: coloredWord.setForeground(Color.GREEN);
                    break;
            case 3: coloredWord.setForeground(Color.MAGENTA);
                    break;
            case 4: coloredWord.setForeground(Color.YELLOW);
                    break;               
        }
    }
    
    // MouseListeners apparently only take a FINAL variable for an index. Can't use i++
    // now we brute force it.
    private void initMouseListeners(){
        buttonCircleIcon[0].addMouseListener(new MouseAdapter(){
                public void mouseEntered(MouseEvent evt){
                    //setForeground(Color.CYAN);
                    buttonCircleIcon[0].setBackground(Color.green);
                }
                public void mouseExited(MouseEvent evt){
                    buttonCircleIcon[0].setBackground(UIManager.getColor("control"));
                }
            });
        buttonCircleIcon[1].addMouseListener(new MouseAdapter(){
                public void mouseEntered(MouseEvent evt){
                    //setForeground(Color.CYAN);
                    buttonCircleIcon[1].setBackground(Color.green);
                }
                public void mouseExited(MouseEvent evt){
                    buttonCircleIcon[1].setBackground(UIManager.getColor("control"));
                }
            });
        buttonCircleIcon[2].addMouseListener(new MouseAdapter(){
                public void mouseEntered(MouseEvent evt){
                    //setForeground(Color.CYAN);
                    buttonCircleIcon[2].setBackground(Color.green);
                }
                public void mouseExited(MouseEvent evt){
                    buttonCircleIcon[2].setBackground(UIManager.getColor("control"));
                }
            });
        buttonCircleIcon[3].addMouseListener(new MouseAdapter(){
                public void mouseEntered(MouseEvent evt){
                    //setForeground(Color.CYAN);
                    buttonCircleIcon[3].setBackground(Color.green);
                }
                public void mouseExited(MouseEvent evt){
                    buttonCircleIcon[3].setBackground(UIManager.getColor("control"));
                }
            });
        buttonCircleIcon[4].addMouseListener(new MouseAdapter(){
                public void mouseEntered(MouseEvent evt){
                    //setForeground(Color.CYAN);
                    buttonCircleIcon[4].setBackground(Color.green);
                }
                public void mouseExited(MouseEvent evt){
                    buttonCircleIcon[4].setBackground(UIManager.getColor("control"));
                }
            });
    }
    
    // Use the strings in coloredImageArray to set text in our label. Also to
    // show we're actually resusing code around here..
    private void generateRandomWord(){
        colorCodedIndex = randIndex.nextInt(coloredImageArray.length);
        String word = coloredImageArray[colorCodedIndex];
        // use Pattern for "." regex because just "." wont work
        String[] segments = word.split(Pattern.quote("."));
        coloredWord.setText(segments[0]);
        System.out.println(segments[0]);        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ColorMe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ColorMe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ColorMe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ColorMe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ColorMe().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel currentTime;
    private javax.swing.JPanel p;
    private javax.swing.JPanel p2;
    private javax.swing.JLabel scoreLabel;
    // End of variables declaration//GEN-END:variables
}
